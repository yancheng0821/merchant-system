<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.merchant.server.authservice.mapper.UserMapper">
    
    <resultMap id="UserResultMap" type="com.merchant.server.authservice.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="tenant_id" property="tenantId" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="password_hash" property="passwordHash" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="last_login_at" property="lastLoginAt" jdbcType="TIMESTAMP"/>
        <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR"/>
        <result column="login_attempts" property="loginAttempts" jdbcType="INTEGER"/>
        <result column="locked_until" property="lockedUntil" jdbcType="TIMESTAMP"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>
    
    <sql id="Base_Column_List">
        id, tenant_id, username, email, phone, password_hash, salt, real_name, avatar_url, 
        status, last_login_at, last_login_ip, login_attempts, locked_until, created_at, updated_at
    </sql>
    
    <select id="selectById" parameterType="java.lang.Long" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE id = #{id}
    </select>
    
    <select id="selectByUsername" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE username = #{username}
    </select>
    
    <select id="selectByUsernameAndTenantId" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE username = #{username} AND tenant_id = #{tenantId}
    </select>
    
    <select id="selectByEmail" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE email = #{email}
    </select>
    
    <select id="selectByEmailAndTenantId" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE email = #{email} AND tenant_id = #{tenantId}
    </select>
    
    <select id="selectByTenantId" parameterType="java.lang.Long" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE tenant_id = #{tenantId}
    </select>
    
    <insert id="insert" parameterType="com.merchant.server.authservice.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            tenant_id, username, email, phone, password_hash, salt, real_name, avatar_url,
            status, last_login_at, last_login_ip, login_attempts, locked_until, created_at, updated_at
        ) VALUES (
            #{tenantId}, #{username}, #{email}, #{phone}, #{passwordHash}, #{salt}, #{realName}, #{avatarUrl},
            #{status}, #{lastLoginAt}, #{lastLoginIp}, #{loginAttempts}, #{lockedUntil}, NOW(), NOW()
        )
    </insert>
    
    <update id="update" parameterType="com.merchant.server.authservice.entity.User">
        UPDATE users
        SET tenant_id = #{tenantId},
            username = #{username},
            email = #{email},
            phone = #{phone},
            password_hash = #{passwordHash},
            salt = #{salt},
            real_name = #{realName},
            avatar_url = #{avatarUrl},
            status = #{status},
            last_login_at = #{lastLoginAt},
            last_login_ip = #{lastLoginIp},
            login_attempts = #{loginAttempts},
            locked_until = #{lockedUntil},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM users WHERE id = #{id}
    </delete>
    
    <select id="existsByUsername" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE username = #{username}
    </select>
    
    <select id="existsByUsernameAndTenantId" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE username = #{username} AND tenant_id = #{tenantId}
    </select>
    
    <select id="existsByEmail" parameterType="java.lang.String" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE email = #{email}
    </select>
    
    <select id="existsByEmailAndTenantId" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE email = #{email} AND tenant_id = #{tenantId}
    </select>
    
</mapper> 